const { chunks, numberToSmile, clubLink, timeFormat, numberWithCommas } = require("../../api/utils"),
    { orgFromDb } = require("./api/db"),
    { Keyboard, users } = require("../../main"),
    { orgs } = require("./api/org"),
    { vkFromDb } = require("../../api/acc");

let vacancy = [];

module.exports = [{
    payload: "vacancy",
    r: /^(?:–æ—Ä–≥(?:–∞–Ω–∏–∑–∞—Ü–∏(?:–∏|—è)?)? )?(?:–≤–∞–∫–∞–Ω—Å–∏(?:–∏|—è))$/i,
    
    async f(msg, user) {
        vacancy.sort(async (a, b) => {
            b.rating - a.rating
        });
        let _vacancy = chunks(vacancy, 1),
            str = parseInt(msg.type == "cmd" ? 0 : (msg.params ? msg.params : 0)),
            postfix = "",
            params = {};

        if (_vacancy[1]) {
            postfix = '\n\n‚ùî –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ —Å–Ω–∏–∑—É, —á—Ç–æ–±—ã –ø—Ä–æ–ª–∏—Å—Ç—ã–≤–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'
            if (str == 0) {
                params = {
                    keyboard: Keyboard.keyboard([
                        Keyboard.textButton({
                            label: '‚ñ∂',
                            payload: {
                                command: 'vacancy',
                                params: 1
                            },
                            color: Keyboard.PRIMARY_COLOR
                        })
                    ]).inline()
                };
            } else if (str != _vacancy.length - 1) {
                params = {
                    keyboard: Keyboard.keyboard([[
                        Keyboard.textButton({
                            label: '‚óÄ',
                            payload: {
                                command: 'vacancy',
                                params: str - 1
                            },
                            color: Keyboard.PRIMARY_COLOR
                        }),
                        Keyboard.textButton({
                            label: '‚ñ∂',
                            payload: {
                                command: 'vacancy',
                                params: str + 1
                            },
                            color: Keyboard.PRIMARY_COLOR
                        })
                    ]]).inline()
                };
            } else {
                params = {
                    keyboard: Keyboard.keyboard([
                        Keyboard.textButton({
                            label: '‚óÄ',
                            payload: {
                                command: 'vacancy',
                                params: str - 1
                            },
                            color: Keyboard.PRIMARY_COLOR
                        })
                    ]).inline()
                };
            }
        }

        if (_vacancy[str] == null) return msg.send(`${msg.prefix}—Å–µ–π—á–∞—Å –Ω–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–∏`);

        msg.send((await Promise.all(_vacancy[str].map(async (v, i) => {
            let org = await orgFromDb(v.id);
            await vkFromDb(org.owner);
            return `${numberToSmile(i + 1)} ${orgs[org.type].emoji} ${orgs[org.type].name} <<@id${org.owner} (${org.name})>>\n‚Ñπ –£—Ä–æ–≤–µ–Ω—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ${org.lvl}/10\nüíµ –ü—Ä–æ—Ü–µ–Ω—Ç —Ä–∞–±–æ—á–∏—Ö: ${org.workerpercent}%\nüëî –í–ª–∞–¥–µ–ª–µ—Ü: @id${org.owner} (${users[org.owner].nick})\nüèÜ –†–µ–π—Ç–∏–Ω–≥: ${numberWithCommas(v.money)}`
        }))).join("\n\n"), params);
    }
},
{
    r: /^(?:–æ—Ä–≥(?:–∞–Ω–∏–∑–∞—Ü–∏—è)?) —Ä–µ–π—Ç–∏–Ω–≥(?: (.*))?/i,
    
    async f(msg, user) {
        if (!msg.match[1]) return msg.send(`‚Ñπ –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –º–µ—Å—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ –≤–∞–∫–∞–Ω—Å–∏—è—Ö. –ß–µ–º –±–æ–ª—å—à–µ —Ä–µ–π—Ç–∏–Ω–≥, —Ç–µ–º –≤—ã—à–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è.\n‚ñ∂ 1 —Ä–µ–π—Ç–∏–Ω–≥ - 10.000$\n‚è≥ –ö—É–ø–ª–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–µ–π—Å—Ç–≤—É–µ—Ç 12 —á–∞—Å–æ–≤. –ï–≥–æ –Ω–µ–ª—å–∑—è –æ–±–Ω–æ–≤–∏—Ç—å –∏–ª–∏ –ø—Ä–∏–±–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏, –ø–æ–∫–∞ –≤—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —É–∂–µ –∏–º–µ—é—â–µ–≥–æ –Ω–µ –∏—Å—Ç–µ—á—ë—Ç.\n\n‚úè –ö–æ–º–∞–Ω–¥–∞ "${clubLink("–û—Ä–≥ —Ä–µ–π—Ç–∏–Ω–≥ (–∫–æ–ª-–≤–æ)")}"`);
        if (!user.org) return msg.send(`üö´ –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–∞–∫–æ–π –ª–∏–±–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏`);

        let org = await orgFromDb(user.org),
            member = org.members[msg.senderId],
            haveRate = false,
            timeTo,
            date = +new Date();

        if (member.rank == 0) return msg.send(`üö´ –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å CEO –∏–ª–∏ –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏`);

        for (let i in vacancy) {
            if (vacancy[i].id == user.org) {
                if (vacancy[i].time < date) {
                    vacancy.splice(i, 1);
                } else {
                    haveRate = true;
                    timeTo = vacancy[i].time - date;
                }
            }
        }

        if (haveRate) return msg.send(`üö´ –£ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —É–∂–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥.\n‚è≥ –í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è: ${timeFormat(Math.floor(timeTo / 1000))}`);

        let money = parseInt(msg.match[1].replace(/–≤—Å–µ|–≤—Å—ë/, org.money).replace(/(k|–∫)/gi, "000"));

        if (isNaN(money)) return msg.send("üö´ –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å—É–º–º—É\n‚úè –û—Ä–≥ —Ä–µ–π—Ç–∏–Ω–≥ [—Å—É–º–º–∞]");
        if (money < 1) return msg.send("üö´ –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É\n‚úè –û—Ä–≥ —Ä–µ–π—Ç–∏–Ω–≥ [—Å—É–º–º–∞]");
        if (money * 10000 > org.money) return msg.send("üö´ –í –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥\nüí∞ –ë–∞–ª–∞–Ω—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: " + numberWithCommas(org.money) + "$");

        vacancy.push({ id: user.org, money: money, time: (+new Date() + 4.32e+7) });
        org.money -= money * 1000;

        msg.send(`${msg.prefix}–≤—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ ${numberWithCommas(money)} —Ä–µ–π—Ç–∏–Ω–≥–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏\nüí∞ –ë–∞–ª–∞–Ω—Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: ${numberWithCommas(org.money)}$`);
    }
}]