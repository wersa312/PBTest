const { numberWithCommas, timeFormat, numberToSmile, getRandomInt } = require("../../api/utils");

const works = {
    dvornik: {
        lvl: 1,
        name: "üßπ –î–≤–æ—Ä–Ω–∏–∫",
        range: [5000, 10000]
    },
    courier: {
        lvl: 2,
        name: "üì¶ –ö—É—Ä—å–µ—Ä",
        range: [10000, 100000]
    },
    gruzchik: {
        lvl: 3,
        name: "üë∑‚Äç‚ôÇÔ∏è –ì—Ä—É–∑—á–∏–∫",
        range: [100000, 1000000]
    },
    taxi: {
        lvl: 4,
        name: "üöï –¢–∞–∫—Å–∏—Å—Ç",
        range: [1000000, 10000000]
    },
    miner: {
        lvl: 4,
        name: "‚õè –®–∞—Ö—Ç–µ—Ä",
        range: [1000000, 10000000]
    },
    manager: {
        lvl: 5,
        name: "üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä",
        range: [10000000, 100000000]
    }
};

let maxLvl = 1;
for (let i in works) {
    if (works[i].lvl > maxLvl) maxLvl = works[i].lvl
}

function workLvl(lvl, exp) {
    if (maxLvl == lvl) return false;
    let needToUp = lvl * 10;
    if (needToUp <= exp) {
        return { lvlup: true, needToUp: (lvl + 1) * 10 }
    } else {
        return { lvlup: false, needToUp: needToUp }
    }
}

const WORK_CD = 3;

module.exports = [
    {
        r: /^(?:—Ä–∞–±–æ—Ç–∞(?:—Ç—å)?|work)$/i,
        payload: "job",
        f(msg, user) {
            if (!user.work) return msg.send(`üö´ –í—ã –Ω–∏–≥–¥–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ\nüìÉ –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π: –†–∞–±–æ—Ç—ã`);

            let cd = 3;

            if (user.newYear && user.newYear.activeCoupons["work"]) {
                if (user.newYear.activeCoupons["work"] + 3600000) {
                    cd = 1.5;
                } else {
                    delete user.newYear.activeCoupons["work"];
                }
            }

            let timeDelta = (user.work.last + (cd * 60 * 1000)) - (+new Date());

            if (timeDelta > 0) return msg.send(`üö´ –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${timeFormat(Math.round(timeDelta / 1000))}`);

            let work = works[user.work.id];
            let payed = getRandomInt(work.range[0], work.range[1]);
            let lvlWork = workLvl(user.work.lvl, user.work.exp);
            let postFix = ``;

            if (lvlWork) {
                if (lvlWork.lvlup) {
                    user.work.lvl++;
                    user.work.exp = 0;
                    postFix = `üÜô LVL UP! –í–∞—à —É—Ä–æ–≤–µ–Ω—å: ${numberToSmile(user.work.lvl)}\n`;
                } else {
                    user.work.exp++;
                }
            }

            user.money += payed;
            user.work.last = +new Date();
            msg.send(
                `${msg.prefix}–∑–∞ —Ä–∞–±–æ—Ç—É –≤–∞–º –≤—ã–ø–ª–∞—á–µ–Ω–æ: ${numberWithCommas(payed)}$\n` +
                `‚ñ∂ –†–∞–±–æ—Ç–∞: ${work.name}\n` +
                postFix +
                `üí∞ –ë–∞–ª–∞–Ω—Å: ${numberWithCommas(user.money)}$`
            );
        }
    },
    {
        r: /^(?:—Ä–∞–±–æ—Ç—ã)$/i,
        f(msg, user) {
            let lvl = user.work ? user.work.lvl : 1;
            msg.send(
                `${msg.prefix}—Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–º —Ä–∞–±–æ—Ç:\n` +
                Object.keys(works).filter(w => lvl >= works[w].lvl).map((w, i) =>
                    `${numberToSmile(i + 1)} ${works[w].name} | –¢—Ä–µ–±—É–µ–º—ã–π —É—Ä–æ–≤–µ–Ω—å: ${numberToSmile(works[w].lvl)}`
                ).join("\n") + "\n\n" +
                `‚ñ∂ –í–∞—à —É—Ä–æ–≤–µ–Ω—å: ${numberToSmile(lvl)}\n` +
                (maxLvl != lvl ? `üÜô –ß–µ–º –≤—ã—à–µ —É—Ä–æ–≤–µ–Ω—å, —Ç–µ–º –±–æ–ª—å—à–µ –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç –≤–∞–º –æ—Ç–∫—Ä—ã–≤–∞—é—Ç—Å—è\n` : '') +
                `‚ùî –ß—Ç–æ–±—ã —É—Å—Ç—Ä–æ–∏—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: –†–∞–±–æ—Ç–∞ [–Ω–æ–º–µ—Ä]`
            );
        }
    },
    {
        r: /^—Ä–∞–±–æ—Ç–∞ ([1-9]+)$/i,
        f(msg, user) {
            let workId = parseInt(msg.match[1]) - 1;
            let userLvl = user.work ? user.work.lvl : 1;
            let canWork = Object.keys(works).filter(w => userLvl >= works[w].lvl);

            if (!canWork[workId]) return msg.send("üö´ –î–∞–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\nüìÉ –°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–º–∞–Ω–¥–æ–π: –†–∞–±–æ—Ç—ã");

            workId = canWork[workId];

            if (user.work && user.work.id == workId) return msg.send(`üö´ –í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ –¥–∞–Ω–Ω—É—é —Ä–∞–±–æ—Ç—É`);

            if (!user.work) {
                user.work = {
                    id: workId,
                    lvl: 1,
                    exp: 0
                }
            } else {
                user.work.id = workId;
            }

            msg.send(`‚úÖ –í—ã —É—Å—Ç—Ä–æ–∏–ª–∏—Å—å –Ω–∞ —Ä–∞–±–æ—Ç—É ${works[workId].name}`);
        }
    }
];