const { numberWithCommas } = require("../../api/utils"),
    { log } = require("../../api/logs"),
    { Keyboard } = require("../../main");

module.exports = [
    {

        r: /^–±+–∞+–Ω+–∫+$/i,
        payload: "bank",
        f(msg, user) {
            let params = {};
            if (user.menu && msg.isFromUser) {
                params = {
                    keyboard: Keyboard.keyboard([
                        [
                            Keyboard.textButton({
                                label: 'üèß –ü–æ–ª–æ–∂–∏—Ç—å –Ω–∞ —Å—á–µ—Ç',
                                payload: {
                                    command: 'getMoneyToBank'
                                },
                                color: Keyboard.POSITIVE_COLOR
                            }),
                            Keyboard.textButton({
                                label: 'üèß –°–Ω—è—Ç—å —Å–æ —Å—á–µ—Ç–∞',
                                payload: {
                                    command: 'getMoneyFromBank'
                                },
                                color: Keyboard.SECONDARY_COLOR
                            })
                        ],
                        [
                            Keyboard.textButton({
                                label: '‚óÄ –ö –ø—Ä–æ—Ñ–∏–ª—é',
                                payload: {
                                    command: 'profile'
                                },
                                color: Keyboard.PRIMARY_COLOR
                            })
                        ]
                    ])
                }
            } else if (msg.isFromUser) {
                params = {
                    keyboard: Keyboard.keyboard([
                        Keyboard.textButton({
                            label: 'üèß –ü–æ–ª–æ–∂–∏—Ç—å –Ω–∞ —Å—á–µ—Ç',
                            payload: {
                                command: 'getMoneyToBank'
                            },
                            color: Keyboard.POSITIVE_COLOR
                        }),
                        Keyboard.textButton({
                            label: 'üèß –°–Ω—è—Ç—å —Å–æ —Å—á–µ—Ç–∞',
                            payload: {
                                command: 'getMoneyFromBank'
                            },
                            color: Keyboard.PRIMARY_COLOR
                        })
                    ]).inline()
                }
            }
            let perDayBank = Math.floor(user.bank.money / 100 / 2);
            msg.send(`üèß –ù–∞ —Å—á–µ—Ç–µ –±–∞–Ω–∫–∞: ${numberWithCommas(user.bank.money)}$
üìà –í –¥–µ–Ω—å –∫–∞–ø–∞–µ—Ç: ~${numberWithCommas(perDayBank)}$`, params);
        }
    },
    {

        r: /^–±+–∞+–Ω+–∫+ —Å+–Ω+—è+—Ç+—å+( ([^\s]+))/i,
        f(msg, user) {
            msg.match[1] = msg.match[1].replace(/–≤—Å–µ|–≤—Å—ë/, user.bank.money).replace(/(k|–∫)/gi, "000");
            let money = parseInt(msg.match[1]);
            if (isNaN(money)) return msg.send('üö´ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å —Å –±–∞–Ω–∫–∞\n‚úè –ë–∞–Ω–∫ —Å–Ω—è—Ç—å [—Å—É–º–º–∞]');
            if (money < 1) return msg.send('üö´ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å —Å –±–∞–Ω–∫–∞');
            if (money > user.bank.money) return msg.send("üö´ –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≤ –±–∞–Ω–∫–µ\nüèß –í –±–∞–Ω–∫–µ: " + numberWithCommas(user.bank.money) + "$");
            user.money += money;
            user.bank.money -= money;
            log(msg.senderId, `–°–Ω—è–ª —Å –±–∞–Ω–∫–∞ ${numberWithCommas(money)}$ | –ë–∞–ª–∞–Ω—Å: ${numberWithCommas(user.money)}$`)
            msg.send(`‚úÖ –° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –±–∞–Ω–∫–∞ —Å–Ω—è—Ç–æ: ${numberWithCommas(money)}$
üèß –û—Å—Ç–∞–ª–æ—Å—å: ${numberWithCommas(user.bank.money)}$`);
        }
    },
    {

        r: /^–±+–∞+–Ω+–∫+ –ø+–æ+–ª+–æ+–∂+–∏+—Ç+—å+( ([^\s]+))/i,
        f(msg, user) {
            msg.match[1] = msg.match[1].replace(/–≤—Å–µ|–≤—Å—ë/, user.money).replace(/(k|–∫)/gi, "000");
            let money = parseInt(msg.match[1]);
            if (isNaN(money)) return msg.send('üö´ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ —Å—á–µ—Ç –≤ –±–∞–Ω–∫–µ\n‚úè –ë–∞–Ω–∫ –ø–æ–ª–æ–∂–∏—Ç—å [—Å—É–º–º–∞]');
            if (money < 1) return msg.send('üö´ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ —Å—á–µ—Ç –≤ –±–∞–Ω–∫–µ');
            if (money > user.money) return msg.send("üö´ –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥\nüí∞ –ù–∞ —Ä—É–∫–∞—Ö: " + numberWithCommas(user.money) + "$");
            user.money -= money;
            user.bank.money += money;
            log(msg.senderId, `–ü–æ–ø–æ–ª–Ω–∏–ª —Å—á–µ—Ç –±–∞–Ω–∫–∞ –Ω–∞ ${numberWithCommas(money)}$ | –ë–∞–ª–∞–Ω—Å: ${numberWithCommas(user.money)}$ | –ë–∞–Ω–∫: ${numberWithCommas(user.bank.money)}$`);
            msg.send(`‚úÖ –ù–∞ –≤–∞—à —Å—á–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–æ: ${numberWithCommas(money)}$
üèß –ù–∞ —Å—á–µ—Ç—É: ${numberWithCommas(user.bank.money)}$`);
        }
    },
    {

        payload: "getMoneyFromBank",
        f(msg, user) {
            user.scene = "getMoneyFromBank";
            msg.send('‚úè –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å —Å –±–∞–Ω–∫–∞\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"');
        }
    },
    {

        scene: "getMoneyFromBank",
        f(msg, user) {
            if (msg.text) {
                if ((/^–æ—Ç–º–µ–Ω–∞/i).test(msg.text)) {
                    msg.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ");
                    return user.scene = null;
                }
                msg.text = msg.text.replace(/–≤—Å–µ|–≤—Å—ë/, user.bank.money).replace(/(k|–∫)/gi, "000");
                let money = parseInt(msg.text);
                if (isNaN(money)) return msg.send('‚úè –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å —Å –±–∞–Ω–∫–∞\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"');
                if (money < 1) return msg.send('‚úè –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Å–Ω—è—Ç—å —Å –±–∞–Ω–∫–∞\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"');
                if (money > user.bank.money) return msg.send("üö´ –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≤ –±–∞–Ω–∫–µ\nüèß –í –±–∞–Ω–∫–µ: " + numberWithCommas(user.bank.money) + "$\n‚úè –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ –¥–ª—è —Å–Ω—è—Ç–∏—è\n\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"");
                user.money += money;
                user.bank.money -= money;
                user.scene = null;
                log(msg.senderId, `–°–Ω—è–ª —Å –±–∞–Ω–∫–∞ ${numberWithCommas(money)}$ | –ë–∞–ª–∞–Ω—Å: ${numberWithCommas(user.money)}$`)
                msg.send(`‚úÖ –° –≤–∞—à–µ–≥–æ —Å—á–µ—Ç–∞ –±–∞–Ω–∫–∞ —Å–Ω—è—Ç–æ: ${numberWithCommas(money)}$
üèß –û—Å—Ç–∞–ª–æ—Å—å: ${numberWithCommas(user.bank.money)}$`);
            }
        }
    },
    {

        payload: "getMoneyToBank",
        f(msg, user) {
            user.scene = "getMoneyToBank";
            msg.send('‚úè –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ —Å—á–µ—Ç –±–∞–Ω–∫–∞\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"');
        }
    },
    {

        scene: "getMoneyToBank",
        f(msg, user) {
            if (msg.text) {
                if ((/^–æ—Ç–º–µ–Ω–∞/i).test(msg.text)) {
                    msg.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ");
                    return user.scene = null;
                }
                msg.text = msg.text.replace(/–≤—Å–µ|–≤—Å—ë/, user.money).replace(/(k|–∫)/gi, "000");
                let money = parseInt(msg.text);
                if (isNaN(money)) return msg.send('‚úè –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ —Å—á–µ—Ç –±–∞–Ω–∫–∞\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"');
                if (money < 1) return msg.send('‚úè –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç—å –Ω–∞ —Å—á–µ—Ç –±–∞–Ω–∫–∞\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ "–û—Ç–º–µ–Ω–∞"');
                if (money > user.money) return msg.send("üö´ –£ –≤–∞—Å –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥\nüí∞ –ù–∞ —Ä—É–∫–∞—Ö: " + numberWithCommas(user.money) + "$\n‚úè –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ\n\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–≤–µ–¥–∏—Ç–µ \"–û—Ç–º–µ–Ω–∞\"");
                user.money -= money;
                user.bank.money += money;
                user.scene = null;
                log(msg.senderId, `–ü–æ–ø–æ–ª–Ω–∏–ª —Å—á–µ—Ç –±–∞–Ω–∫–∞ –Ω–∞ ${numberWithCommas(money)}$ | –ë–∞–ª–∞–Ω—Å: ${numberWithCommas(user.money)}$ | –ë–∞–Ω–∫: ${numberWithCommas(user.bank.money)}$`);
                msg.send(`‚úÖ –ù–∞ –≤–∞—à —Å—á–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–æ: ${numberWithCommas(money)}$
üèß –ù–∞ —Å—á–µ—Ç—É: ${numberWithCommas(user.bank.money)}$`);
            }
        }
    }
];