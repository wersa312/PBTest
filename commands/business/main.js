const { log } = require("../../api/logs");
const { numberWithCommas } = require("../../api/utils");
const { Keyboard } = require("../../main");
const business = require("./api/business.json");
const { updateBis } = require("./api/main");

module.exports = [
    {
        r: /^–±–∏–∑–Ω–µ—Å$/i,
        payload: "business",
        /**
         * 
         * @param {import("vk-io").MessageContext} msg 
         * @param {*} user 
         */
        f(msg, user) {
            if (!Object.keys(user.business).length) return msg.send(`${msg.prefix}—É –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤. –î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∏–∑–Ω–µ—Å—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n` +
                (Object.keys(business).filter(b => business[b].price).map(id => {
                    let b = business[id];
                    return `‚†Ä${b.price < user.money ? 'üîπ' : 'üî∏'} ${b.name} - ${numberWithCommas(b.price)}$`
                }).join("\n")) +
                `\n\nüõí –î–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞, –≤–≤–µ–¥–∏—Ç–µ: –ö—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å [–Ω–∞–∑–≤–∞–Ω–∏–µ]`);

            let mayToBuy = Object.keys(business).filter(b => {
                if (business[b].price && !user.business[b]) return true; else return false;
            }).length;

            let buttons = [
                Object.keys(user.business).map(id => Keyboard.textButton({
                    label: business[id].name,
                    payload: {
                        command: "business_info",
                        params: id
                    }
                })),
                [
                    Keyboard.textButton({
                        label: 'üíµ –û–ø–ª–∞—Ç–∏—Ç—å –Ω–∞–ª–æ–≥–∏',
                        payload: {
                            command: "business_tax"
                        },
                        color: Keyboard.PRIMARY_COLOR
                    }),
                    Keyboard.textButton({
                        label: 'üí∞ –°–æ–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å',
                        payload: {
                            command: "business_collect"
                        },
                        color: Keyboard.POSITIVE_COLOR
                    })
                ]
            ];

            if (user.menu && msg.isFromUser) {
                buttons.push([
                    Keyboard.textButton({
                        label: "‚óÄ –ù–∞–∑–∞–¥",
                        payload: {
                            command: 'profile'
                        },
                        color: Keyboard.PRIMARY_COLOR
                    })
                ]);
            }

            let boost = false;

            if (user.newYear && user.newYear.activeCoupons["business"]) {
                if (user.newYear.activeCoupons["business"] + 3600000 > +new Date()) {
                    boost = true;
                } else {
                    delete user.newYear.activeCoupons["business"];
                }
            }

            msg.send(
                `${msg.prefix}–≤–∞—à–∏ –±–∏–∑–Ω–µ—Å—ã:\n` +
                (Object.keys(user.business).map(id => {
                    updateBis(user.business[id], boost);
                    return `‚†Ä${business[id].name}\n` +
                        `‚†Ä‚†Äüîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${user.business[id].count}\n` +
                        `‚†Ä‚†Äüì¶ –¢–æ–≤–∞—Ä–∞: ${numberWithCommas(user.business[id][(user.business[id].items != null ? 'items' : 'fuel')])}\n` +
                        `‚†Ä‚†Äüí∞ –ü—Ä–∏–±—ã–ª—å: ${numberWithCommas(user.business[id].money)}$\n` +
                        `‚†Ä‚†Äüíµ –ù–∞–ª–æ–≥–∏: ${numberWithCommas(Math.round(user.business[id].tax))}$/1,000,000$`;
                }).join("\n\n")),
                {
                    keyboard: Keyboard.keyboard(buttons).inline(!(user.menu && msg.isFromUser))
                }
            );
        }

    },

    {
        payload: "business_tax",
        r: /^–±–∏–∑–Ω–µ—Å –Ω–∞–ª–æ–≥–∏$/i,
        f(msg, user) {
            let bizes = Object.keys(user.business);

            if (!bizes.length) return msg.send(`üö´ –£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞`, {
                keyboard: Keyboard.keyboard([
                    Keyboard.textButton({
                        label: "üíº –ë–∏–∑–Ω–µ—Å—ã",
                        payload: {
                            command: "business"
                        }
                    })
                ]).inline()
            });

            let boost = false;

            if (user.newYear && user.newYear.activeCoupons["business"]) {
                if (user.newYear.activeCoupons["business"] + 3600000 > +new Date()) {
                    boost = true;
                } else {
                    delete user.newYear.activeCoupons["business"];
                }
            }

            let taxes = 0;
            for (let i in bizes) {
                updateBis(user.business[bizes[i]], boost);
                taxes += Math.round(user.business[bizes[i]].tax);
            }

            if (taxes > user.money) return msg.send(`üö´ –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥. –ù–∞–ª–æ–≥–æ–≤ –Ω–∞ —Å—É–º–º—É ${numberWithCommas(taxes)}$\nüí∏ –í–∞—à –±–∞–ª–∞–Ω—Å: ${numberWithCommas(user.money)}$`);

            user.money -= taxes;
            for (let i in bizes) {
                user.business[bizes[i]].tax = 0;
            }

            log(msg.senderId, `–û–ø–ª–∞—Ç–∏–ª –Ω–∞–ª–æ–≥–∏ ${numberWithCommas(taxes)}$`);
            msg.send(`‚úÖ –ù–∞–ª–æ–≥–∏ –Ω–∞ —Å—É–º–º—É $${numberWithCommas(taxes)} –æ–ø–ª–∞—á–µ–Ω—ã`);
        }
    },

    {
        payload: "business_collect",
        r: /^–±–∏–∑–Ω–µ—Å —Å–æ–±—Ä–∞—Ç—å$/i,
        f(msg, user) {
            let bizes = Object.keys(user.business);
            let postFix = ``;

            if (!bizes.length) return msg.send(`üö´ –£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–∞`, {
                keyboard: Keyboard.keyboard([
                    Keyboard.textButton({
                        label: "üíº –ë–∏–∑–Ω–µ—Å—ã",
                        payload: {
                            command: "business"
                        }
                    })
                ]).inline()
            });

            let money = 0;
            for (let i in bizes) {
                if (!isNaN(user.business[bizes[i]].money)) money += Math.round(user.business[bizes[i]].money);
            }

            let boost = false;

            if (user.newYear) {
                if (user.newYear.activeCoupons["business"]) {
                    if (user.newYear.activeCoupons["business"] + 3600000 > +new Date()) {
                        boost = true;
                    } else {
                        delete user.newYear.activeCoupons["business"];
                    }
                }
                if (user.business["—Ñ–∞–±—Ä–∏–∫–∞"]) {
                    if (!user.business["—Ñ–∞–±—Ä–∏–∫–∞"].givedSnow) user.business["—Ñ–∞–±—Ä–∏–∫–∞"].givedSnow = 0;
                    if (user.business["—Ñ–∞–±—Ä–∏–∫–∞"].givedSnow + 3600000 < +new Date()) {
                        user.business["—Ñ–∞–±—Ä–∏–∫–∞"].givedSnow = +new Date();
                        let toGive = (6000 * user.business["—Ñ–∞–±—Ä–∏–∫–∞"].count);
                        user.newYear.coins += toGive;
                        postFix = `\n‚ùÑ –ü–æ–ª—É—á–µ–Ω–æ ${numberWithCommas(toGive)} —Å–Ω–µ–∂–∏–Ω–æ–∫ —Å —Ñ–∞–±—Ä–∏–∫`
                    }
                }
            }

            user.money += money;
            for (let i in bizes) {
                user.business[bizes[i]].money = 0;
            }

            log(msg.senderId, `–ü–æ–ª—É—á–∏–ª ${numberWithCommas(money)}$ —Å –±–∏–∑–Ω–µ—Å–æ–≤`);
            msg.send(`${money > 0 ? `‚úÖ –ü—Ä–∏–±—ã–ª—å $${numberWithCommas(money)} —Å –±–∏–∑–Ω–µ—Å–æ–≤ —Å–æ–±—Ä–∞–Ω–∞` : '‚ùå –ü—Ä–∏–±—ã–ª–∏ –Ω–µ—Ç'}${postFix}`);
        }
    },

    {
        payload: "business_info",
        r: /^–±–∏–∑–Ω–µ—Å ([\S]+)$/i,
        f(msg, user) {
            let biz_type;
            if (msg.type == "cmd") {
                if (/–º–∞–≥–∞–∑/.test(msg.match[1])) {
                    biz_type = "–º–∞–≥–∞–∑";
                } else {
                    biz_type = msg.match[1];
                }
            } else {
                biz_type = msg.params;
            }

            biz_type = biz_type.toLowerCase();

            if (biz_type == "–Ω–∞–ª–æ–≥–∏" || biz_type == "—Å–æ–±—Ä–∞—Ç—å") return;

            if (!user.business[biz_type]) return msg.send(`üö´ –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞`);

            let boost = false;

            if (user.newYear && user.newYear.activeCoupons["business"]) {
                if (user.newYear.activeCoupons["business"] + 3600000 > +new Date()) {
                    boost = true;
                } else {
                    delete user.newYear.activeCoupons["business"];
                }
            }

            updateBis(user.business[biz_type], boost);
            msg.send(`üí≤ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–∑–Ω–µ—Å–µ ${business[biz_type].name}\n` +
                `‚†Ä‚†Äüîπ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${user.business[biz_type].count}\n` +
                `‚†Ä‚†Äüì¶ –¢–æ–≤–∞—Ä–∞: ${numberWithCommas(user.business[biz_type][(user.business[biz_type].items != null ? 'items' : 'fuel')])}\n` +
                `‚†Ä‚†Äüí∞ –ü—Ä–∏–±—ã–ª—å: ${numberWithCommas(user.business[biz_type].money)}$\n` +
                `‚†Ä‚†Äüíµ –ù–∞–ª–æ–≥–∏: ${numberWithCommas(Math.round(user.business[biz_type].tax))}$/1,000,000$\n\n` +
                `üì¶ –î–ª—è –∑–∞–∫—É–ø–∫–∏ —Ç–æ–≤–∞—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: –ë–∏–∑–Ω–µ—Å ${biz_type} —Ç–æ–≤–∞—Ä [–∫–æ–ª-–≤–æ]`);
        }
    },

    {
        r: /^–±–∏–∑–Ω–µ—Å ([\S]+) —Ç–æ–≤–∞—Ä ([\S]+)$/i,
        f(msg, user) {
            let biz_type;
            if (/–º–∞–≥–∞–∑/.test(msg.match[1])) {
                biz_type = "–º–∞–≥–∞–∑";
            } else {
                biz_type = msg.match[1].toLowerCase();
            }

            if (!user.business[biz_type]) return msg.send(`üö´ –£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞`);

            let boost = false;

            if (user.newYear && user.newYear.activeCoupons["business"]) {
                if (user.newYear.activeCoupons["business"] + 3600000 > +new Date()) {
                    boost = true;
                } else {
                    delete user.newYear.activeCoupons["business"];
                }
            }

            updateBis(user.business[biz_type], boost);

            let tovars = parseInt(msg.match[2].replace(/(–∫|k)/gi, "000"));
            if (isNaN(tovars) || tovars < 1) return msg.send(`üö´ –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ`);

            let cost = tovars * 10;
            if (cost > user.money) return msg.send(`üö´ ${numberWithCommas(tovars)} —Ç–æ–≤–∞—Ä–∞ —Å—Ç–æ–∏—Ç ${numberWithCommas(cost)}$\n` +
                `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${numberWithCommas(user.money)}$`);

            let tovar_type = (user.business[biz_type].items != null ? 'items' : 'fuel');

            user.business[biz_type][tovar_type] += tovars;
            user.money -= cost;

            log(msg.senderId, `–ö—É–ø–∏–ª —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ ${numberWithCommas(cost)}$`);
            msg.send(`üí∏ –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ ${numberWithCommas(tovars)} —Ç–æ–≤–∞—Ä–∞ –∑–∞ ${numberWithCommas(cost)}$\n` +
                `üì¶ –¢–æ–≤–∞—Ä–∞: ${numberWithCommas(user.business[biz_type][tovar_type])}\n` +
                `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${numberWithCommas(user.money)}$`);
        }
    }
]