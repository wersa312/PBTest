const { numberWithCommas } = require("../../api/utils");

module.exports = [
    {
        r: /^(flip|—Ñ–ª–∏–ø|—Ñ–µ–π–∫ –±–∞–ª–∞–Ω—Å)( .*)?$/i,
        status: 2,
        f(msg, user) {
            if (user.flip) {
                delete user.flip;
                msg.send(`‚úÖ –§–µ–π–∫–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –≤—ã–∫–ª—é—á–µ–Ω`);
            } else {
                user.flip = true;
                if (user.testmoney == null) user.testmoney = 0;
                msg.send(`‚úÖ –§–µ–π–∫–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –≤–∫–ª—é—á–µ–Ω\n‚ùî –ß—Ç–æ –±—ã –∏–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –≤–≤–µ–¥–∏—Ç–µ "–î–µ–Ω—å–≥–∏ [—Å—É–º–º–∞]"`);
            }
        }
    },
    {
        r: /^–¥–µ–Ω—å–≥–∏(?: ([\S]+))?$/i,
        status: 2,
        f(msg, user) {
            if (!user.flip) return msg.send(`üö´ –°–ø–µ—Ä–≤–∞ –≤–∫–ª—é—á–∏—Ç–µ —Ñ–µ–π–∫–æ–≤—ã–π –±–∞–ª–∞–Ω—Å. –ö–æ–º–∞–Ω–¥–∞: flip`);

            let money = parseInt(msg.match[1].replace(/k|–∫/gi, "000"));
            if (isNaN(money)) return msg.send(`üö´ –í–≤–µ–¥–∏—Ç–µ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ`);

            user.testmoney = money;
            msg.send(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –±–∞–ª–∞–Ω—Å: ${numberWithCommas(money)}$`);
        }
    }
]