const { getRandomId } = require("vk-io");
const { sendPush } = require("../../api/sendPush");
const { db, vkGroup, Keyboard, users } = require("../../main"),
    { timeFormat, antiBan, randElement } = require("../../api/utils"),
    { getAdmins, getRepAdmins } = require("../../api/admin_utils"),
    { vkFromDb, vkId } = require("../../api/acc");

async function answerRep(msg, id) {

    let [report] = await db.collection("reports").find({ id: id }).toArray();

    msg.text = msg.text.replace(/\*–∞–º–Ω–∏—Å—Ç–∏—è\*/gi, "https://vk.cc/azDbWE").replace(/\*–ª–∏–º–∏—Ç–∫–∞\*/i, "https://vk.cc/azDdis")

    await vkFromDb(report.vk);

    let attachments = [];
    if (msg.hasAttachments) {
        for (let el of msg.attachments) {
            if (el.type == "photo") {
                let photo = await vkGroup.upload.messagePhoto({
                    source: {
                        value: el.largeSizeUrl
                    },
                    peer_id: report.msg.peer_id
                });
                attachments.push(photo);
            } else {
                attachments.push(`${el.type}${el.ownerId}_${el.id}_${el.accessKey}`);
            }
        }
    }

    vkGroup.api.messages.send({
        user_ids: await getRepAdmins(),
        message: `üì§ @id${msg.senderId} (${users[msg.senderId].nick}) –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ @id${report.vk} (—Ä–µ–ø–æ—Ä—Ç) #${id}: ${msg.text ? msg.text : ""}`,
        random_id: getRandomId(),
        forward: JSON.stringify({
            peer_id: report.msg.peerId,
            conversation_message_ids: report.msg.id
        })
    });

    await vkGroup.api.messages.send({
        peer_ids: (2e9 < report.msg.peerId ? (report.msg.peerId + "," + report.vk) : report.msg.peerId),
        message: `üì¢ –ù–∞ –≤–∞—à—É –∂–∞–ª–æ–±—É –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç
‚úâ –û—Ç–≤–µ—Ç: ${msg.text ? msg.text : ""}`,
        keyboard: Keyboard.keyboard([[
            Keyboard.textButton({
                label: 'üëçüèª',
                payload: {
                    command: 'user_report_respond',
                    params: {
                        id: id,
                        positive: true
                    },
                    toId: report.vk
                },
                color: Keyboard.POSITIVE_COLOR
            }),
            Keyboard.textButton({
                label: 'üëéüèª',
                payload: {
                    command: 'user_report_respond',
                    params: {
                        id: id,
                        positive: false
                    },
                    toId: report.vk
                },
                color: Keyboard.NEGATIVE_COLOR
            })
        ]]).inline(),
        attachment: attachments,
        random_id: getRandomId(),
        forward: JSON.stringify({
            peer_id: report.msg.peerId,
            conversation_message_ids: report.msg.id
        })
    });
}

module.exports = [
    {
        payload: "report",

        async f(msg, user) {
            user.scene = "report";
            msg.send(`‚úè –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º`, {
                keyboard: Keyboard.keyboard([
                    Keyboard.textButton({
                        label: "‚óÄ –í –º–µ–Ω—é",
                        payload: {
                            command: "menu",
                            params: "main_menu"
                        },
                        color: Keyboard.PRIMARY_COLOR
                    })
                ])
            });
        }
    },
    {
        r: /^([–ñ–∂]–∞–ª–æ–±–∞|report|[–†—Ä]–µ–ø–æ—Ä—Ç|[–†—Ä]–µ–ø)( ([\s\S]+))?$/i,
        scene: "report",

        /**
         * 
         * @param {import("vk-io").MessageContext} msg 
         */
        async f(msg, user) {

            if (msg.type == "scene" && !msg.hasText) return msg.send("üö´ –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ—é –∂–∞–ª–æ–±—É\n‚úè –í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ–∫—Å—Ç–æ–º –∂–∞–ª–æ–±—É");
            if (msg.type == "cmd" && !msg.match[2]) return msg.send("üö´ –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å–≤–æ—é –∂–∞–ª–æ–±—É\n‚úè –ñ–∞–ª–æ–±–∞ [—Ç–µ–∫—Å—Ç]");

            if (user.banrep) {
                if (user.banrep["time"]) {
                    if (user.banrep["time"] > +new Date()) return msg.send(`${msg.prefix}–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–∏—Å–∞—Ç—å –≤ —Ä–µ–ø–æ—Ä—Ç
üïí –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${timeFormat(user.banrep["time"])}`);
                    delete user.banrep;
                } else {
                    return msg.send(`${msg.prefix}–í–∞–º –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–∏—Å–∞—Ç—å –≤ —Ä–µ–ø–æ—Ä—Ç`);
                }
            }

            if (user.timeOfReport && user.timeOfReport + 30000 > +new Date()) return msg.send("üö´ –ü–æ–¥–æ–∂–¥–∏—Ç–µ 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–π –∂–∞–ª–æ–±—ã");
            user.timeOfReport = +new Date();

            let { id } = await db.collection('reports').findOne({}, { sort: { id: -1 }, projection: { id: 1 } }),
                admins = await getRepAdmins(),
                adminsVK = await vkGroup.api.users.get({ user_ids: admins.join(","), fields: "online" });

            if (id == null) id = 0;
            id++;
            adminsVK = adminsVK.filter(admin => admin.online).length;

            msg.send(`${msg.prefix}–≤–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≥–µ–Ω—Ç–∞–º.\nüì± –ê–≥–µ–Ω—Ç–æ–≤ –≤ —Å–µ—Ç–∏: ${adminsVK}\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞`);

            await db.collection("reports").insertOne({
                id: id,
                vk: user.vk,
                msg: {
                    peerId: msg.peerId,
                    id: msg.conversationMessageId
                },
                admin: -1,
                closed: false,
                liked: null
            });

            let chat;

            if (msg.isChat) {
                let { items } = await vkGroup.api.messages.getConversationsById({ peer_ids: msg.peerId });
                [chat] = items;
            }

            vkGroup.api.messages.send({
                peer_ids: admins.join(","),
                message: `${msg.isChat ? `[–ë–ï–°–ï–î–ê${chat?.chat_settings.title ? ` "${chat?.chat_settings.title}" ` : " "}#chat${msg.chatId}]` : `[–õ–°]`}
üîé –ù–æ–º–µ—Ä –∂–∞–ª–æ–±—ã: ${id}
üÜî [id${msg.senderId}|${user.nick}]: ${msg.senderId} #report${msg.senderId}
üÜî –ê–π–¥–∏ –∏–≥—Ä–æ–∫–∞: ${user.fake_id}`,
                forward: JSON.stringify({
                    peer_id: msg.peerId,
                    conversation_message_ids: msg.conversationMessageId
                }),
                keyboard: Keyboard.keyboard([
                    [
                        Keyboard.textButton({
                            label: '‚úè –û—Ç–≤–µ—Ç–∏—Ç—å',
                            payload: {
                                command: 'adm_report_respond',
                                params: id
                            },
                            color: Keyboard.POSITIVE_COLOR
                        })
                    ],
                    [
                        Keyboard.textButton({
                            label: 'üö´ –ó–∞–∫—Ä—ã—Ç—å',
                            payload: {
                                command: 'adm_report_close',
                                params: id
                            },
                            color: Keyboard.NEGATIVE_COLOR
                        }),
                        Keyboard.textButton({
                            label: '‚ùå –ó–∞–±–∞–Ω–∏—Ç—å',
                            payload: {
                                command: 'adm_report_ban',
                                params: id
                            },
                            color: Keyboard.NEGATIVE_COLOR
                        })
                    ]
                ]).inline(),
                random_id: getRandomId()
            });
        }
    },
    {
        payload: "adm_report_respond",

        status: 100,
        async f(msg, user) {
            if (!user.admin_events.canRep) return;

            let [report] = await db.collection("reports").find({ id: msg.params }).toArray();
            if (!report) return msg.send(`üö´ –î–∞–Ω–Ω–æ–≥–æ —Ä–µ–ø–æ—Ä—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            if (report.closed) return msg.send(`üö´ –î–∞–Ω–Ω—ã–π —Ä–µ–ø–æ—Ä—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç`);
            if (report.admin != -1 && report.admin != msg.senderId) {
                await vkFromDb(report.admin);
                return msg.send(`üö´ –≠—Ç–æ—Ç —Ä–µ–ø–æ—Ä—Ç —É–∂–µ –≤–∑—è–ª @id${report.admin} (${users[report.admin].nick})`);
            }
            await db.collection("reports").updateOne({ id: msg.params }, {
                $set: {
                    admin: msg.senderId,
                    closed: true
                }
            });
            user.scene = "adm_report_respond";
            user.scenerep = msg.params;
            msg.send("‚úè –í–≤–µ–¥–∏ –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\nüö´ –î–ª—è –æ—Ç–º–µ–Ω—ã, –≤–≤–µ–¥–∏ \"–û—Ç–º–µ–Ω–∞\"");

            vkGroup.api.messages.send({
                user_ids: await getRepAdmins(),
                message: `‚ö† @id${msg.senderId} (${users[msg.senderId].nick}) –≤–∑—è–ª @id${report.vk} (—Ä–µ–ø–æ—Ä—Ç) #${msg.params}`,
                random_id: getRandomId(),
                forward: JSON.stringify({
                    peer_id: report.msg.peerId,
                    conversation_message_ids: report.msg.id
                })
            });
        }
    },
    {
        scene: "adm_report_respond",

        status: 100,
        async f(msg, user) {
            if (!user.admin_events.canRep) return;

            if (msg.hasText && msg.text.toLowerCase() == "–æ—Ç–º–µ–Ω–∞") {
                await db.collection("reports").updateOne({ id: user.scenerep }, {
                    $set: {
                        admin: -1,
                        closed: false
                    }
                });
                delete user.scene;
                delete user.scenerep;
                return msg.send("üö´ –û—Ç–º–µ–Ω–µ–Ω–æ");
            }
            msg.send("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
            user.cookie += 500;
            answerRep(msg, user.scenerep);
            delete user.scene;
            delete user.scenerep;
        }
    },
    {
        payload: "adm_report_close",

        status: 100,
        async f(msg, user) {
            if (!user.admin_events.canRep) return;

            let [report] = await db.collection("reports").find({ id: msg.params }).toArray();
            if (!report) return;
            if (report.closed) return msg.send(`üö´ –î–∞–Ω–Ω—ã–π —Ä–µ–ø–æ—Ä—Ç —É–∂–µ –∑–∞–∫—Ä—ã—Ç`);
            if (report.admin != -1) {
                await vkFromDb(report.admin);
                return msg.send(`üö´ –≠—Ç–æ—Ç —Ä–µ–ø–æ—Ä—Ç —É–∂–µ –≤–∑—è–ª @id${report.admin} (${users[report.admin].nick})`);
            }

            await db.collection("reports").deleteOne({ id: msg.params });

            sendPush(await getRepAdmins(), `@id${msg.senderId} (${user.nick}) –∑–∞–∫—Ä—ã–ª —Ä–µ–ø–æ—Ä—Ç #${msg.params}`);

            msg.send("üö´ –†–µ–ø–æ—Ä—Ç –∑–∞–∫—Ä—ã—Ç");
        }
    },
    {
        payload: "adm_report_ban",

        status: 100,
        async f(msg, user) {
            if (!user.admin_events.canRep) return;

            let [report] = await db.collection("reports").find({ id: msg.params }).toArray();
            if (!report) return;

            await vkFromDb(report.vk);
            users[report.vk].banrep = true;

            sendPush(await getRepAdmins(), `@id${msg.senderId} (${user.nick}) –∑–∞–±–∞–Ω–∏–ª —Ä–µ–ø–æ—Ä—Ç #${msg.params}.\n–ò–≥—Ä–æ–∫: *id${report.vk}`);
            msg.send("üö´ –í—ã–¥–∞–Ω –±–∞–Ω —Ä–µ–ø–æ—Ä—Ç–∞");
        }
    },
    {
        r: /^unbanrep ([\S]+)/i,
        status: 100,
        async f(msg, user) {
            if (!user.admin_events.canRep) return;
            let id = await vkId(msg.match[1]);
            await vkFromDb(id);
            delete users[id].banrep;

            msg.send("üö´ –°–Ω—è—Ç –±–∞–Ω —Ä–µ–ø–æ—Ä—Ç–∞");
        }
    },
    {
        payload: "user_report_respond",

        async f(msg, user) {
            let [report] = await db.collection("reports").find({ id: msg.params.id }).toArray();

            if (report.liked != null) return;

            await db.collection("reports").updateOne({ id: msg.params.id }, {
                $set: {
                    liked: msg.params.positive
                }
            });

            let adm = report.admin;

            await vkFromDb(adm);

            if (adm && users[adm].status.type >= 100) {
                if (!users[adm].techRate) users[adm].techRate = 0
                users[adm].techRate += msg.params.positive ? 10 : -10;
                vkGroup.api.messages.send({
                    peer_id: adm,
                    message: `${msg.params.positive ? 'üëçüèª' : 'üëéüèª'} @id${msg.senderId} (${user.nick}) –æ—Ü–µ–Ω–∏–ª –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–ø–æ—Ä—Ç ‚Ññ${msg.params.id}\nüëë –í–∞—à —Ä–µ–π—Ç–∏–Ω–≥: ${users[adm].techRate}`,
                    random_id: getRandomId(),
                    forward: JSON.stringify({
                        peer_id: report.msg.peerId,
                        conversation_message_ids: report.msg.id
                    })
                });
                msg.send(`${msg.prefix}–æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ! ${randElement(['‚ô•', 'üíô', 'üíö', 'üíõ'])}`);
            }
        }
    },
    {
        r: /^–∂–∞–ª–æ–±—ã$/i,
        status: 100,
        async f(msg, user) {
            if (msg.isChat) return;
            if (!user.admin_events.canRep) return;

            let report = await db.collection("reports").findOne({ closed: false });
            if (!report) return msg.send(`–ñ–∞–ª–æ–± –Ω–µ—Ç`);

            await vkFromDb(report.vk);

            msg.send(
                `‚ö† –ñ–∞–ª–æ–±–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞\n` +
                `üîé –ù–æ–º–µ—Ä –∂–∞–ª–æ–±—ã: ${report.id}\n` +
                `üÜî [id${report.vk}|${users[report.vk].nick}]: ${report.vk} #report${report.vk}\n` +
                `üÜî –ê–π–¥–∏ –∏–≥—Ä–æ–∫–∞: ${users[report.vk].fake_id}`,
                {
                    forward: JSON.stringify({
                        peer_id: report.msg.peerId,
                        conversation_message_ids: report.msg.id
                    }),
                    keyboard: Keyboard.keyboard([
                        [
                            Keyboard.textButton({
                                label: '‚úè –û—Ç–≤–µ—Ç–∏—Ç—å',
                                payload: {
                                    command: 'adm_report_respond',
                                    params: report.id
                                },
                                color: Keyboard.POSITIVE_COLOR
                            })
                        ],
                        [
                            Keyboard.textButton({
                                label: 'üö´ –ó–∞–∫—Ä—ã—Ç—å',
                                payload: {
                                    command: 'adm_report_close',
                                    params: report.id
                                },
                                color: Keyboard.NEGATIVE_COLOR
                            }),
                            Keyboard.textButton({
                                label: '‚ùå –ó–∞–±–∞–Ω–∏—Ç—å',
                                payload: {
                                    command: 'adm_report_ban',
                                    params: report.id
                                },
                                color: Keyboard.NEGATIVE_COLOR
                            })
                        ]
                    ]).inline()
                });
        }
    }
];