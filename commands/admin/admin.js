const moment = require("moment");
const { getRandomId } = require("vk-io");
const { vkId, vkFromDb, saveUsersToDb } = require("../../api/acc");
const { getAdmins } = require("../../api/admin_utils");
const { users, vkGroup } = require("../../main");

module.exports = [
    {
        r: /^–∞–¥–º–∏–Ω ([^\s]+)$/i,
        status: 100,
        async f(msg, user) {
            if (!user.admin_events.canUp) return;

            let id = await vkId(msg.match[1]);
            await vkFromDb(id);

            if (id == -1 || !users[id]) return msg.send(`üö´ –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            let _user = users[id];

            if (_user.status.type == 100) {
                _user.status.type = 0;
                delete _user.admin_events;
                vkGroup.api.messages.send({
                    user_ids: await getAdmins(),
                    message: `‚ö† –ì–ê @id${msg.senderId} (${user.nick}) —Å–Ω—è–ª —Å –∞–¥–º–∏–Ω–∫–∏ @id${id} (${_user.nick})\n#pbchangestatus`,
                    random_id: getRandomId()
                });
                msg.send(`‚ùå @id${id} (${_user.nick}) —Å–Ω—è—Ç —Å –∞–¥–º–∏–Ω–∫–∏ –∏ –±—ã–ª –≤—ã–¥–∞–Ω —Å—Ç–∞—Ç—É—Å "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"`);
            } else {
                _user.status.type = 100;
                if (_user.cookie == null) _user.cookie = 0;
                _user.admin_events = {
                    kicked: 0,
                    bans_gived: 0,
                    warn_gived: 0,
                    upped: moment().format('L'),
                    upped_by: msg.senderId
                };
                vkGroup.api.messages.send({
                    user_ids: await getAdmins(),
                    message: `‚ö† –ì–ê @id${msg.senderId} (${user.nick}) –ø–æ—Å—Ç–∞–≤–∏–ª –Ω–∞ –∞–¥–º–∏–Ω–∫—É @id${id} (${_user.nick})\n#pbchangestatus`,
                    random_id: getRandomId()
                });
                msg.send(`‚úÖ @id${id} (${_user.nick}) –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –∞–¥–º–∏–Ω–∫—É\nüí¨ –ü–æ–∫–∞ –µ–º—É –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: –∫–∏–∫, –≤–∞—Ä–Ω, –∫–æ–º–∞–Ω–¥—ã V.I.P. –∏ Premium.`);
            }
            return saveUsersToDb(0);
        }
    },

    {
        r: /^–∞–¥–º–∏–Ω ([^\s]+) (.*)$/i,
        status: 100,
        async f(msg, user) {
            if (!user.admin_events.canUp) return;

            let id = await vkId(msg.match[1]);
            await vkFromDb(id);

            if (id == -1 || !users[id]) return msg.send(`üö´ –ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            if (users[id].status.type != 100) return msg.send(`üö´ –ù–µ –∞–¥–º–∏–Ω`);

            let _user = users[id],
                _text = msg.match[2];

            if (_text == "–±–∞–Ω") {
                if (_user.admin_events.canBan) {
                    delete _user.admin_events.canBan;
                    msg.send(`‚ùå @id${id} (${_user.nick}) –ø–æ—Ç–µ—Ä—è–ª —Å–∏–ª—É –±–∞–Ω–æ–≤`);
                } else {
                    _user.admin_events.canBan = true;
                    msg.send(`‚úÖ @id${id} (${_user.nick}) –æ–≤–ª–∞–¥–µ–ª —Å–∏–ª–æ–π –±–∞–Ω–æ–≤`);
                }
            }

            else if (_text == "–∏–º–º—É–Ω–∏—Ç–µ—Ç") {
                if (_user.admin_events.ban_imun) {
                    delete _user.admin_events.ban_imun;
                    msg.send(`‚ùå @id${id} (${_user.nick}) –ø–æ—Ç–µ—Ä—è–ª –∏–º–º—É–Ω–∏—Ç–µ—Ç –∫ –±–∞–Ω–∞–º`);
                } else {
                    _user.admin_events.ban_imun = true;
                    msg.send(`‚úÖ @id${id} (${_user.nick}) –æ–≤–ª–∞–¥–µ–ª –∏–º–º—É–Ω–∏—Ç–µ—Ç–æ–º –∫ –±–∞–Ω–∞–º`);
                }
            }

            else if (_text == "—Ä–µ–ø–æ—Ä—Ç") {
                if (_user.admin_events.canRep) {
                    delete _user.admin_events.canRep;
                    msg.send(`‚ùå @id${id} (${_user.nick}) –ø–æ—Ç–µ—Ä—è–ª –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ—Ä—Ç–∞–º`);
                } else {
                    _user.admin_events.canRep = true;
                    msg.send(`‚úÖ @id${id} (${_user.nick}) –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–ø–æ—Ä—Ç–∞–º`);
                }
            }

            else if (_text == "–æ–±–Ω—É–ª") {
                if (_user.admin_events.canObnul) {
                    delete _user.admin_events.canObnul;
                    msg.send(`‚ùå @id${id} (${_user.nick}) –ø–æ—Ç–µ—Ä—è–ª —Å–∏–ª—É –æ–±–Ω—É–ª–∞`);
                } else {
                    _user.admin_events.canObnul = true;
                    msg.send(`‚úÖ @id${id} (${_user.nick}) –æ–≤–ª–∞–¥–µ–ª —Å–∏–ª–æ–π –æ–±–Ω—É–ª–æ–≤`);
                }
            }

            else if (_text == "–ª–æ–≥–∏") {
                if (_user.admin_events.canLog) {
                    delete _user.admin_events.canLog;
                    msg.send(`‚ùå @id${id} (${_user.nick}) –ø–æ—Ç–µ—Ä—è–ª —Å–∏–ª—É –ª–æ–≥–æ–≤`);
                } else {
                    _user.admin_events.canLog = true;
                    msg.send(`‚úÖ @id${id} (${_user.nick}) –æ–≤–ª–∞–¥–µ–ª —Å–∏–ª–æ–π –ª–æ–≥–æ–≤`);
                }
            }

            else if (_text == "–¥–±") {
                if (_user.admin_events.canEdit) {
                    delete _user.admin_events.canEdit;
                    msg.send(`‚ùå @id${id} (${_user.nick}) —Ç–µ–ø–µ—Ä—å –Ω–µ –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏, –∫–æ–∏–Ω—ã, –≥–æ–ª–¥—É`);
                } else {
                    _user.admin_events.canEdit = true;
                    msg.send(`‚úÖ @id${id} (${_user.nick}) —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏, –∫–æ–∏–Ω—ã, –≥–æ–ª–¥—É`);
                }
            }

            else if (_text == "–¥–µ–≤") {
                if (_user.admin_events.canEval) {
                    delete _user.admin_events.canEval;
                    msg.send(`‚ùå @id${id} (${_user.nick}) —Ç–µ–ø–µ—Ä—å –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π "dev"`);
                } else {
                    _user.admin_events.canEval = true;
                    msg.send(`‚úÖ @id${id} (${_user.nick}) —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–æ–π "dev"`);
                }
            }

            saveUsersToDb(0);
        }
    }
]