let { course } = require("../../api/pockecoins"),
    { numberWithCommas } = require("../../api/utils"),
    { log } = require("../../api/logs");

module.exports = [
    {
        r: /^–∫–æ–∏–Ω—ã$/i,
        f(msg, user) {
            msg.send(`${msg.prefix}—É –≤–∞—Å ${numberWithCommas(user.coins ? user.coins : 0)} Pockecoins\nüîº –î–ª—è –ø–æ–∫—É–ø–∫–∏, –Ω–∞–ø–∏—à–∏—Ç–µ: –ö–æ–∏–Ω—ã –∫—É–ø–∏—Ç—å [–∫–æ–ª-–≤–æ]\nüîΩ –î–ª—è –ø—Ä–æ–¥–∞–∂–∏, –Ω–∞–ø–∏—à–∏—Ç–µ: –ö–æ–∏–Ω—ã –ø—Ä–æ–¥–∞—Ç—å [–∫–æ–ª-–≤–æ]`);
        }
    },
    {
        r: /^(–∫—É–ø–∏—Ç—å –∫–æ–∏–Ω—ã|–∫–æ–∏–Ω—ã –∫—É–ø–∏—Ç—å)( (.*))?$/i,

        f(msg, user) {
            if (!msg.match[3]) return msg.send(`üö´ –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è\n‚úè –ö—É–ø–∏—Ç—å –∫–æ–∏–Ω—ã [—á–∏—Å–ª–æ]`);

            let bufc = course.course,
                coins = parseInt(msg.match[3].replace(/–≤—Å–µ|–≤—Å—ë/, Math.floor(user.money / bufc)).replace(/(k|–∫)/gi, "000"));

            if (isNaN(coins) || coins < 1) return msg.send(`üö´ –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è\n‚úè –ö—É–ø–∏—Ç—å –∫–æ–∏–Ω—ã [—á–∏—Å–ª–æ]`);
            if (user.money < (coins * bufc)) return msg.send(`üö´ –£ –≤–∞—Å –Ω–µ—Ç ${numberWithCommas(coins * bufc)}$ –¥–ª—è –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏—è ${numberWithCommas(coins)} pockecoins\nüí∞ –ë–∞–ª–∞–Ω—Å: ${numberWithCommas(user.money)}$`);

            user.money -= coins * bufc;
            user.coins += coins;

            msg.send(`${msg.prefix}–≤—ã –ø—Ä–∏–æ–±—Ä–µ–ª–∏ ${numberWithCommas(coins)} pockecoins (-${numberWithCommas(coins * bufc)}$)\nüí≥ Pockecoins: ${numberWithCommas(user.coins)}\nüí∞ –ë–∞–ª–∞–Ω—Å: ${numberWithCommas(user.money)}$`);

            log(user.vk, `–ö—É–ø–∏–ª ${numberWithCommas(coins)} pockecoins –Ω–∞ ${numberWithCommas(coins * bufc)}$`);
        }
    },
    {
        r: /^(–ø—Ä–æ–¥–∞—Ç—å –∫–æ–∏–Ω—ã|–∫–æ–∏–Ω—ã –ø—Ä–æ–¥–∞—Ç—å)( (.*))?$/i,

        f(msg, user) {
            if (!msg.match[3]) return msg.send(`üö´ –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏\n‚úè –ü—Ä–æ–¥–∞—Ç—å –∫–æ–∏–Ω—ã [—á–∏—Å–ª–æ]`);

            let bufc = course.course,
                coins = parseInt(msg.match[3].replace(/–≤—Å–µ|–≤—Å—ë/, Math.floor(user.coins)).replace(/(k|–∫)/gi, "000"));

            if (isNaN(coins) || coins < 1) return msg.send(`üö´ –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏\n‚úè –ü—Ä–æ–¥–∞—Ç—å –∫–æ–∏–Ω—ã [—á–∏—Å–ª–æ]`);
            if (user.coins < coins) return msg.send(`üö´ –£ –≤–∞—Å –Ω–µ—Ç ${numberWithCommas(coins)} pockecoins\nüí≥ Pockecoins: ${numberWithCommas(user.coins)}`);

            user.money += coins * bufc;
            user.coins -= coins;

            msg.send(`${msg.prefix}–≤—ã –ø—Ä–æ–¥–∞–ª–∏ ${numberWithCommas(coins)} pockecoins (+${numberWithCommas(coins * bufc)}$)\nüí≥ Pockecoins: ${numberWithCommas(user.coins)}\nüí∞ –ë–∞–ª–∞–Ω—Å: ${numberWithCommas(user.money)}$`);

            log(user.vk, `–ü—Ä–æ–¥–∞–ª ${numberWithCommas(coins)} pockecoins –Ω–∞ ${numberWithCommas(coins * bufc)}$`);
        }
    }
]