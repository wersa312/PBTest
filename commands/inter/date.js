const request = require("request"),
    { vkId, vkFromDb } = require("../../api/acc"),
    { users, Keyboard } = require("../../main"),
    { dateFormat } = require("../../api/utils"),
    { parseStringPromise } = require('xml2js');

module.exports = {
    r: /^–¥–∞—Ç–∞( (.*))?$/i,
    payload: "date",
    scene: "date",
    
    /**
     * 
     * @param {import("vk-io").MessageContext} msg 
     * @param {*} user 
     */

    async f(msg, user) {
        let fid, id, postfix = "", params = {};

        if (msg.hasReplyMessage) {
            fid = msg.replyMessage.senderId;
        } else if (msg.hasForwards) {
            fid = msg.forwards[0].senderId;
        }

        if (!fid) {
            if (msg.type == "cmd") fid = msg.match[2] ? msg.match[2] : msg.senderId;
            if (msg.type == "payload") {
                user.scene = "date";
                fid = msg.senderId;
                postfix = "\n\n‚úè –í—ã –º–æ–∂–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏";
                params = {
                    keyboard: Keyboard.keyboard([
                        Keyboard.textButton({
                            label: "‚óÄ –ù–∞–∑–∞–¥",
                            payload: {
                                command: "menu",
                                params: "ent"
                            },
                            color: Keyboard.PRIMARY_COLOR
                        })
                    ])
                }
            }
            if (msg.type == "scene") fid = msg.text ? msg.text : msg.senderId;
        }

        id = await vkId(fid);
        if (id == -1) return msg.send("üìÖ –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —á–µ–ª–æ–≤–µ–∫–∞\n‚úè " + (msg.type == "scene" ? "–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å—Å—ã–ª–∫—É" : "–î–∞—Ç–∞ [—Å—Å—ã–ª–∫–∞]"));
        await vkFromDb(id);

        request("https://vk.com/foaf.php?id=" + id, async function (e, b) {
            try {
                let data = await parseStringPromise(b.body),
                    infouser = data["rdf:RDF"]["foaf:Person"][0],
                    created = infouser["ya:created"][0].$["dc:date"],
                    lastSeen = infouser["ya:lastLoggedIn"][0].$["dc:date"];

                if (!created) return msg.send("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω");

                msg.send(`üíª –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${dateFormat(new Date(created))} ${lastSeen ? `\nüì± –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –∑–∞—Ö–æ–¥–∏–ª –≤ –í–ö: ${dateFormat(new Date(lastSeen))}` : ""} ${users[id] ? "\nü§ñ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –±–æ—Ç–µ: " + dateFormat(new Date(users[id].reg_date)) : ""}` + postfix, params);
            } catch (err) {
                msg.send('–≤–∫ –≥–æ–≤–Ω–æ–µ–¥—ã');
                console.log(err);
            }
        });
    }
}